extends ../layout

block content
  h1.mb-5 #{__("edit_info_title")} #{information._id}

  ul#langSelector.nav.nav-tabs
    each loc in availableLocales
      li.nav-item
        a.lang-tab.nav-link(data-lang=`${loc.code}`) #{loc.name}

  form#infoForm
    each loc in availableLocales
      include ../partials/panel_info_edit.pug
    hr
    include ../partials/error_banner.pug
    button(type="submit").btn.btn-primary.col-md-2.offset-md-10 #{__("submit_button")}

  script(src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.2/Sortable.min.js" integrity="sha512-TelkP3PCMJv+viMWynjKcvLsQzx6dJHvIGhfqzFtZKgAjKM1YPqcwzzDEoTc/BHjf43PcPzTQOjuTr4YdE8lNQ==" crossorigin="anonymous" referrerpolicy="no-referrer")
  script.
    const removeButtonLabels = !{JSON.stringify(removeButtonLabels)};
    const placeholdersForLabels = !{JSON.stringify(placeholdersForLabels)};
    const placeholdersForDescriptions = !{JSON.stringify(placeholdersForDescriptions)};

    document.addEventListener('DOMContentLoaded', function() {
      function changeLocaleFocus(locale) {
        const langTabs = document.querySelectorAll('.lang-tab');
        const oldActiveTab = document.querySelector('.active')
        if (oldActiveTab) {
          oldActiveTab.classList.remove('active');
        }
        const newActiveTab = document.querySelector(`.lang-tab[data-lang*="${locale}"]`)
        newActiveTab.classList.add('active');
        const localizedPanels = document.querySelectorAll('.localizedPanel');
        localizedPanels.forEach(function(localizedPanel) {
          localizedPanel.classList.add('d-none');
        });
        const newActiveLocalizedPanel = document.querySelector(`.localizedPanel[data-lang*="${locale}"]`)
        newActiveLocalizedPanel.classList.remove('d-none');
        newActiveLocalizedPanel.classList.add('d-block');
      }

      const langTabs = document.querySelectorAll('.lang-tab');
      langTabs.forEach(function(langTab) {
        langTab.addEventListener('click', function() {
          changeLocaleFocus(this.dataset.lang)
        })
      })

      changeLocaleFocus("#{currentLocale}");

      function sortListByIds(list, itemIds) {
        const listLocale = list.dataset.lang;

        var clonedItems = itemIds.map(function(itemId) {
          const newId = listLocale + itemId.substring(2);
          var item = document.getElementById(newId);
          return item ? item.cloneNode(true) : null;
        });

        while (list.firstChild) {
          list.removeChild(list.firstChild);
        }

        clonedItems.forEach(function(clonedItem) {
          if (clonedItem) {
            list.appendChild(clonedItem);
          }
        });
      }

      var lists = document.querySelectorAll('.addedInfoList');
      lists.forEach(function(list) {
        new Sortable(list, {
          handle: '.field-handle',
          onUpdate: function() {
            var itemIds = [];
            list.querySelectorAll('li').forEach(function(item) {
              itemIds.push(item.id);
            });

            lists.forEach(function(otherList) {
              if (otherList !== list) {
                sortListByIds(otherList, itemIds);
              }
            });
          }
        });
      });

      function removeItemFromEveryList(itemId) {
        var lists = document.querySelectorAll('.addedInfoList');
        lists.forEach((list) => {
          const listLocale = list.dataset.lang;
          const listItem = document.querySelector(`#${listLocale}${itemId.substring(2)}`);
          listItem.remove();
        });
      }

      let removeButtons = document.querySelectorAll('.remove-button');
      removeButtons.forEach(function(button) {
        button.addEventListener('click', function() {
          removeItemFromEveryList(this.parentElement.parentElement.id);
        });
      });

      let addButtons = document.querySelectorAll('.add-button');
      addButtons.forEach(function(button) {
        button.addEventListener('click', function() {
          const currentTimestamp = Date.now();
          const infoLists = document.querySelectorAll('.addedInfoList');
          infoLists.forEach((infoList) => {
            const currentLocale = infoList.dataset.lang;
            const newItemId = `${currentLocale}-tmp-${currentTimestamp}`;

            const itemRow = document.createElement('tr');
            itemRow.id = newItemId;
            itemRow.classList.add('field-row');

            const handleCell = document.createElement('td');
            handleCell.classList.add('text-center');
            const handle = document.createElement('i');
            handle.classList.add('bi', 'bi-grip-vertical', 'field-handle');
            handleCell.appendChild(handle);

            const labelCell = document.createElement('td');
            const labelInput = document.createElement('input');
            labelInput.classList.add('form-control', 'form-control-sm', 'field-label');
            labelInput.type = 'text';
            labelInput.name = newItemId + '-label';
            labelInput.placeholder = placeholdersForLabels[currentLocale];
            labelCell.appendChild(labelInput);

            const descriptionCell = document.createElement('td');
            const descriptionInput = document.createElement('input');
            descriptionInput.classList.add('form-control', 'form-control-sm', 'field-description');
            descriptionInput.type = 'text';
            descriptionInput.name = newItemId + '-field-description';
            descriptionInput.placeholder = placeholdersForDescriptions[currentLocale];
            descriptionCell.appendChild(descriptionInput);

            const buttonCell = document.createElement('td');
            buttonCell.classList.add('text-center');
            const removeButton = document.createElement('span');
            removeButton.innerHTML = removeButtonLabels[currentLocale];
            removeButton.classList.add('btn', 'btn-danger', 'btn-sm', 'remove-button');
            removeButton.style.cursor = 'pointer';
            removeButton.addEventListener('click', function() {
              removeItemFromEveryList(newItemId);
            });
            buttonCell.appendChild(removeButton);

            itemRow.appendChild(handleCell);
            itemRow.appendChild(labelCell);
            itemRow.appendChild(descriptionCell);
            itemRow.appendChild(buttonCell);

            infoList.querySelector('tbody').appendChild(itemRow);
          });
        });
      });

      let checkboxes = document.querySelectorAll('.form-check-input');
      checkboxes.forEach(function(checkbox) {
        checkbox.addEventListener('change', function() {
          const checkedStatus = this.checked;
          const otherCheckboxes = document.querySelectorAll(`[id*=${this.id.substring(3)}]`);
          otherCheckboxes.forEach(function(otherCheckbox) {
            otherCheckbox.checked = checkedStatus;
          });
        })
      });
    });

    const form = document.getElementById('infoForm');
    form.addEventListener('submit', function(event) {
      event.preventDefault();
      const formData = new FormData(form);

      const deletedCheck = document.querySelector('[id*=deleted]');
      let deletedCheckStatus = false;
      if (deletedCheck) {
        deletedCheckStatus = deletedCheck.checked;
      }

      const dataToSubmit = {
        labels: [],
        descriptions: [],
        fields: [],
        deleted: deletedCheckStatus
      };

      const localizedPanels = document.querySelectorAll('.localizedPanel');
      localizedPanels.forEach(function(localizedPanel) {
        const panelLocale = localizedPanel.dataset.lang;
        dataToSubmit.labels.push({
          'locale': panelLocale,
          'text': localizedPanel.querySelector('[id$=title]').value
        });
        dataToSubmit.descriptions.push({
          'locale': panelLocale,
          'text': localizedPanel.querySelector('[id$=info-description]').value
        });
        const fields = localizedPanel.querySelectorAll('.field-row');
        fields.forEach((field) => {
          const fieldId = field.id.substring(3);
          const fieldIndex = dataToSubmit.fields.findIndex(function(field) {
            return field._id === fieldId;
          });
          const label = field.querySelector('.field-label');
          const description = field.querySelector('.field-description');

          if (fieldIndex !== -1) {
            dataToSubmit.fields[fieldIndex].labels.push({
              locale: panelLocale,
              text: label.value
            });
            dataToSubmit.fields[fieldIndex].descriptions.push({
              locale: panelLocale,
              text: description.value
            });
          } else {
            dataToSubmit.fields.push({
              _id: fieldId,
              labels: [{
                locale: panelLocale,
                text: label.value
              }],
              descriptions: [{
                locale: panelLocale,
                text: description.value
              }]
            });
          }
        });
      });

      fetch(`/info/edit/#{information._id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dataToSubmit)
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          return response.json().then(error => {
            const errorBanner = document.getElementById('error-banner');
            errorBanner.textContent = error.error;
            throw new Error('Errore durante il salvataggio del campo: ' + error.error);
          });
        }
      })
      .then(data => {
        window.location.href = `/info/view/${data.savedInformation._id}`;
      })
      .catch(error => {
        const errorMessage = document.getElementById('error-message');
        const errorSeparator = document.getElementById('error-hr');
        console.error('Errore:', error);
        errorMessage.classList.remove('d-none')
        errorMessage.classList.add('d-block')
        errorSeparator.classList.remove('d-none')
        errorSeparator.classList.add('d-block')
      });
    });