p#dateOfIssue.text-center.fst-italic.mb-5 #{document.dateOfIssue}

script.
  function getLabel(id) {
    for (const field of document.fields) {
      for (const info of field.fields) {
        if (info._id === id) {
          return info.label;
        }
      }
    }
    return '';
  }

.container-sm
  each info in document.information
    if (user.permissions.manage_documents || info.public)
      - let info_id = 'id-' + info._id
      - let classes = info.public ? '' : 'bg-secondary-subtle'
      div.info(class=`${classes}`)
        h4.info-title(id=info_id)
        ul
          each field in info.fields
            - let field_id = 'id-' + field._id
            li.field
              span.field-title(id=field_id).field-id.fw-semibold #{field._id}
              | : 
              span.field-value !{field.value}

  hr.mt-5.mb-5

  #qr-url.text-center.fst-italic
    canvas
    p #{__("doc_view_qr_link_caption")}

  hr.mt-5.mb-5

  #qr-record.text-center.fst-italic.mb-5
    canvas
    p #{__("doc_view_qr_document_caption")}
  
  p#docId.text-center #{__("document_no")} #{document.id}

script(src="https://cdn.jsdelivr.net/npm/qrious@4.0.2/dist/qrious.min.js") 
script.
  const dateOfIssue = document.querySelector('#dateOfIssue');
  const date = new Date(dateOfIssue.innerHTML);
  const options = {
    day: 'numeric',
    month: 'numeric',
    year: 'numeric',
    hour: 'numeric',
    minute: 'numeric'
  };
  const localized = date.toLocaleString(navigator.language, options);
  dateOfIssue.innerHTML = localized;

  function getLabel(labels, locale) {
    for (const label of labels) {
      if (label.locale === locale) {
        return label.text;
      }
    }

    for (const label of labels) {
      if (label.locale === 'en') {
        return label.text;
      }
    }

    return labels[0].text;
  }

  function setLabels(labels) {
    const locale_complete = navigator.language || navigator.userLanguage;
    const locale = locale_complete.substring(0, 2);

    for (const block of labels) {
      const infoId = 'id-' + block.id;
      const h2Element = document.getElementById(infoId);

      if (h2Element) {
        const label = getLabel(block.labels, locale);

        h2Element.innerText = label;
      }

      for (const field of block.fields) {
        const fieldId = 'id-' + field.id;
        const spanElement = document.getElementById(fieldId);

        if (spanElement) {
          const label = getLabel(field.labels, locale);

          spanElement.innerText = label;
        }
      }
    }
  }

  function fetchLabels(infoIds) {
    return fetch('/info/list/labels', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ infoIds })
    })
    .then(response => {
      if (response.ok) {
        return response.json();
      } else {
        throw new Error('Errore durante il recupero delle label dei campi');
      }
    })
    .catch(error => {
      console.error('Errore:', error);
    });
  }

  let doc =  !{JSON.stringify(document)};
  let infoIds = [];
  for (const info of doc.information) {
    let fields = info.fields.map(info => info._id);
    infoIds.push({ _id: info._id, fields });
  }
  fetchLabels(infoIds)
    .then(labels => {
      setLabels(labels);
      function getInfo() {
        const infos = document.querySelectorAll('.info');
        let result = '';
        infos.forEach((info) => {
          result += `- ${info.querySelector('.info-title').textContent}\n`;
          const fields = info.querySelectorAll('.field');
          fields.forEach((field) => {
            result += ` - ${field.textContent}\n`;
          });
        });
        return result;
      }

      const qrUrl = new QRious({
        element: document.querySelector('#qr-url canvas'),
        size: 200,
        value: `${window.location.origin}${window.location.pathname}`
      });

      let recordAsText = `!{__("record_no")} !{document.id}\n`;
      recordAsText += `!{__("record_date_issue")}: !{document.dateOfIssue}\n`;
      recordAsText += `!{__("record_date_edit")}: !{document.lastEdit}\n`;
      recordAsText += `!{__("record_information")}:\n`;
      recordAsText += getInfo();
      
      const qrRecord = new QRious({
        element: document.querySelector('#qr-record canvas'),
        size: 300,
        value: recordAsText
      });
    });
  